{
  "version": 3,
  "sources": ["../../primereact/progressspinner/progressspinner.esm.js"],
  "sourcesContent": ["'use client';\r\nimport * as React from 'react';\r\nimport { PrimeReactContext } from 'primereact/api';\r\nimport { ComponentBase, useHandleStyle } from 'primereact/componentbase';\r\nimport { useMergeProps } from 'primereact/hooks';\r\nimport { classNames } from 'primereact/utils';\r\n\r\nvar classes = {\r\n  root: 'p-progress-spinner',\r\n  spinner: 'p-progress-spinner-svg',\r\n  circle: 'p-progress-spinner-circle'\r\n};\r\nvar styles = \"\\n@layer primereact {\\n    .p-progress-spinner {\\n        position: relative;\\n        margin: 0 auto;\\n        width: 100px;\\n        height: 100px;\\n        display: inline-block;\\n    }\\n    \\n    .p-progress-spinner::before {\\n        content: '';\\n        display: block;\\n        padding-top: 100%;\\n    }\\n    \\n    .p-progress-spinner-svg {\\n        animation: p-progress-spinner-rotate 2s linear infinite;\\n        height: 100%;\\n        transform-origin: center center;\\n        width: 100%;\\n        position: absolute;\\n        top: 0;\\n        bottom: 0;\\n        left: 0;\\n        right: 0;\\n        margin: auto;\\n    }\\n    \\n    .p-progress-spinner-circle {\\n        stroke-dasharray: 89, 200;\\n        stroke-dashoffset: 0;\\n        stroke: #d62d20;\\n        animation: p-progress-spinner-dash 1.5s ease-in-out infinite, p-progress-spinner-color 6s ease-in-out infinite;\\n        stroke-linecap: round;\\n    }\\n}\\n\\n@keyframes p-progress-spinner-rotate {\\n    100% {\\n        transform: rotate(360deg);\\n    }\\n}\\n\\n@keyframes p-progress-spinner-dash {\\n    0% {\\n        stroke-dasharray: 1, 200;\\n        stroke-dashoffset: 0;\\n    }\\n    50% {\\n        stroke-dasharray: 89, 200;\\n        stroke-dashoffset: -35px;\\n    }\\n    100% {\\n        stroke-dasharray: 89, 200;\\n        stroke-dashoffset: -124px;\\n    }\\n}\\n\\n@keyframes p-progress-spinner-color {\\n    100%,\\n    0% {\\n        stroke: #d62d20;\\n    }\\n    40% {\\n        stroke: #0057e7;\\n    }\\n    66% {\\n        stroke: #008744;\\n    }\\n    80%,\\n    90% {\\n        stroke: #ffa700;\\n    }\\n}\\n\";\r\nvar inlineStyles = {\r\n  spinner: function spinner(_ref) {\r\n    var props = _ref.props;\r\n    return {\r\n      animationDuration: props.animationDuration\r\n    };\r\n  }\r\n};\r\nvar ProgressSpinnerBase = ComponentBase.extend({\r\n  defaultProps: {\r\n    __TYPE: 'ProgressSpinner',\r\n    id: null,\r\n    style: null,\r\n    className: null,\r\n    strokeWidth: '2',\r\n    fill: 'none',\r\n    animationDuration: '2s',\r\n    children: undefined\r\n  },\r\n  css: {\r\n    classes: classes,\r\n    styles: styles,\r\n    inlineStyles: inlineStyles\r\n  }\r\n});\r\n\r\nvar ProgressSpinner = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(function (inProps, ref) {\r\n  var mergeProps = useMergeProps();\r\n  var context = React.useContext(PrimeReactContext);\r\n  var props = ProgressSpinnerBase.getProps(inProps, context);\r\n  var elementRef = React.useRef(null);\r\n  var _ProgressSpinnerBase$ = ProgressSpinnerBase.setMetaData({\r\n      props: props\r\n    }),\r\n    ptm = _ProgressSpinnerBase$.ptm,\r\n    cx = _ProgressSpinnerBase$.cx,\r\n    sx = _ProgressSpinnerBase$.sx,\r\n    isUnstyled = _ProgressSpinnerBase$.isUnstyled;\r\n  useHandleStyle(ProgressSpinnerBase.css.styles, isUnstyled, {\r\n    name: 'progressspinner'\r\n  });\r\n  React.useImperativeHandle(ref, function () {\r\n    return {\r\n      props: props,\r\n      getElement: function getElement() {\r\n        return elementRef.current;\r\n      }\r\n    };\r\n  });\r\n  var rootProps = mergeProps({\r\n    id: props.id,\r\n    ref: elementRef,\r\n    style: props.style,\r\n    className: classNames(props.className, cx('root')),\r\n    role: 'progressbar',\r\n    'aria-busy': true\r\n  }, ProgressSpinnerBase.getOtherProps(props), ptm('root'));\r\n  var spinnerProps = mergeProps({\r\n    className: cx('spinner'),\r\n    viewBox: '25 25 50 50',\r\n    style: sx('spinner')\r\n  }, ptm('spinner'));\r\n  var circleProps = mergeProps({\r\n    className: cx('circle'),\r\n    cx: '50',\r\n    cy: '50',\r\n    r: '20',\r\n    fill: props.fill,\r\n    strokeWidth: props.strokeWidth,\r\n    strokeMiterlimit: '10'\r\n  }, ptm('circle'));\r\n  return /*#__PURE__*/React.createElement(\"div\", rootProps, /*#__PURE__*/React.createElement(\"svg\", spinnerProps, /*#__PURE__*/React.createElement(\"circle\", circleProps)));\r\n}));\r\nProgressSpinner.displayName = 'ProgressSpinner';\r\n\r\nexport { ProgressSpinner };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AACA,YAAuB;AAMvB,IAAI,UAAU;AAAA,EACZ,MAAM;AAAA,EACN,SAAS;AAAA,EACT,QAAQ;AACV;AACA,IAAI,SAAS;AACb,IAAI,eAAe;AAAA,EACjB,SAAS,SAAS,QAAQ,MAAM;AAC9B,QAAI,QAAQ,KAAK;AACjB,WAAO;AAAA,MACL,mBAAmB,MAAM;AAAA,IAC3B;AAAA,EACF;AACF;AACA,IAAI,sBAAsB,cAAc,OAAO;AAAA,EAC7C,cAAc;AAAA,IACZ,QAAQ;AAAA,IACR,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,WAAW;AAAA,IACX,aAAa;AAAA,IACb,MAAM;AAAA,IACN,mBAAmB;AAAA,IACnB,UAAU;AAAA,EACZ;AAAA,EACA,KAAK;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF,CAAC;AAED,IAAI,kBAAqC,WAAwB,iBAAW,SAAU,SAAS,KAAK;AAClG,MAAI,aAAa,cAAc;AAC/B,MAAI,UAAgB,iBAAW,iBAAiB;AAChD,MAAI,QAAQ,oBAAoB,SAAS,SAAS,OAAO;AACzD,MAAI,aAAmB,aAAO,IAAI;AAClC,MAAI,wBAAwB,oBAAoB,YAAY;AAAA,IACxD;AAAA,EACF,CAAC,GACD,MAAM,sBAAsB,KAC5B,KAAK,sBAAsB,IAC3B,KAAK,sBAAsB,IAC3B,aAAa,sBAAsB;AACrC,iBAAe,oBAAoB,IAAI,QAAQ,YAAY;AAAA,IACzD,MAAM;AAAA,EACR,CAAC;AACD,EAAM,0BAAoB,KAAK,WAAY;AACzC,WAAO;AAAA,MACL;AAAA,MACA,YAAY,SAAS,aAAa;AAChC,eAAO,WAAW;AAAA,MACpB;AAAA,IACF;AAAA,EACF,CAAC;AACD,MAAI,YAAY,WAAW;AAAA,IACzB,IAAI,MAAM;AAAA,IACV,KAAK;AAAA,IACL,OAAO,MAAM;AAAA,IACb,WAAW,WAAW,MAAM,WAAW,GAAG,MAAM,CAAC;AAAA,IACjD,MAAM;AAAA,IACN,aAAa;AAAA,EACf,GAAG,oBAAoB,cAAc,KAAK,GAAG,IAAI,MAAM,CAAC;AACxD,MAAI,eAAe,WAAW;AAAA,IAC5B,WAAW,GAAG,SAAS;AAAA,IACvB,SAAS;AAAA,IACT,OAAO,GAAG,SAAS;AAAA,EACrB,GAAG,IAAI,SAAS,CAAC;AACjB,MAAI,cAAc,WAAW;AAAA,IAC3B,WAAW,GAAG,QAAQ;AAAA,IACtB,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,GAAG;AAAA,IACH,MAAM,MAAM;AAAA,IACZ,aAAa,MAAM;AAAA,IACnB,kBAAkB;AAAA,EACpB,GAAG,IAAI,QAAQ,CAAC;AAChB,SAA0B,oBAAc,OAAO,WAA8B,oBAAc,OAAO,cAAiC,oBAAc,UAAU,WAAW,CAAC,CAAC;AAC1K,CAAC,CAAC;AACF,gBAAgB,cAAc;",
  "names": []
}
